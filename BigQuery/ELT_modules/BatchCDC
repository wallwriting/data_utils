CREATE OR REPLACE PROCEDURE dpa.sp_BatchCDC(argSourceTableArray ARRAY<STRUCT<col_source_dataset STRING, col_source_table_name STRING, col_source_timestamp_field_name STRING, col_target_table_name STRING>>, argMetaTableStruct STRUCT<meta_dataset STRING, meta_table_name STRING, meta_key STRING, meta_timestamp STRING>, argTargetDataset STRING)
BEGIN

--/*this is the list of variables that should go into the stored proc's parameters--used for testing*/
-- DECLARE argSourceTableArray ARRAY<STRUCT<col_source_dataset STRING, col_source_table_name STRING, col_source_timestamp_field_name STRING, col_target_table_name STRING>>;
-- DECLARE argMetaTableStruct STRUCT<meta_dataset STRING, meta_table_name STRING, meta_key STRING, meta_timestamp STRING>;
-- DECLARE argTargetDataset STRING;
--/*end of variables that are sp parameters*/

    DECLARE curCounter INT64;
    DECLARE varRange INT64;
    DECLARE varIterationTable STRING;
    DECLARE varQueryText STRING;

    DECLARE varIterationDataset STRING;
    DECLARE varIterationTimestampCol STRING;
    DECLARE varIterationTargetTable STRING;
    DECLARE varWhereClause STRING;
    DECLARE varLastRunTimestamp TIMESTAMP;
    DECLARE varThisRunTimestamp TIMESTAMP;

    DECLARE varMainDataset STRING;
    DECLARE varMainTable STRING;
    DECLARE varMainJoinKey STRING;
    DECLARE varMainTimestampCol STRING;

    DECLARE varMetaDataset STRING;
    DECLARE varMetaTable STRING;
    DECLARE varMetaKey STRING;
    DECLARE varMetaTimestampCol STRING;

    DECLARE varDMLPrefix STRING;

--/*this is setting the parameters that would normally be passed on the stored proc call*/
-- SET argSourceTableArray = [('MY-DATASET', 'MY-TABLE', 'MY-TIMESTAMP-FIELD', 'MY-TARGET-TABLE')];
-- SET argMetaTableStruct = ('MY-DATASET', 'MY-METADATA-TABLE', 'MY-METADATA-KEY-FIELD', 'MY-METADATA-TIMESTAMP');
-- SET argTargetDataset = 'MY-TARGET-DATASET';
--/*end section*/

    /*sets meta table variables based on the STRUCT paramater passed in the proc call*/
    SET varMetaDataset = 
            (WITH unstruct as (select argMetaTableStruct as a) SELECT a.meta_dataset FROM unstruct);
    SET varMetaTable = 
            (WITH unstruct as (select argMetaTableStruct as a) SELECT a.meta_table_name FROM unstruct);
    SET varMetaKey = 
            (WITH unstruct as (select argMetaTableStruct as a) SELECT a.meta_key FROM unstruct);
    SET varMetaTimestampCol = 
            (WITH unstruct as (select argMetaTableStruct as a) SELECT a.meta_timestamp FROM unstruct);


    /*Puts the last run timestamp from the meta table into a temp table--this is needed because
    the syntax requirements for setting a variable in the 2nd step can't include variables for the dataset and table name*/
    EXECUTE IMMEDIATE
    'CREATE OR REPLACE TEMP TABLE tmp_var_meta AS '
    || 'SELECT MAX(' || varMetaTimestampCol || ') AS meta_ts FROM ' || varMetaDataset || '.' 
    || varMetaTable || ';'
    ;
    SET varLastRunTimestamp = (SELECT meta_ts FROM tmp_var_meta);

    /*creates a temp table with the flattened array and table/join key column names 
    from the STRUCT fields*/
    CREATE OR REPLACE TEMP TABLE tmp_right_table_flattened_list AS
    WITH flattened_struct AS (select argSourceTableArray)
    select row_number() OVER() as row_id, a FROM flattened_struct, UNNEST(argSourceTableArray) a
    ;


    /*sets the timestamp for this run using a current timestamp function*/
    SET varThisRunTimestamp = current_timestamp();

--     /* sets the value for the where clause where the records from the source table will be filtered
--     by the last run and current run timestamps*/
--     SET varWhereClause = 
--         ' WHERE a.' || varMainTimestampCol || """ > '""" || varLastRunTimestamp || """' AND a."""
--         || varMainTimestampCol || """ <= '""" || varThisRunTimestamp || """')"""
--     ;


    /*gets a count of all the records*/
    SET curCounter = 1;
    SET varRange = (SELECT COUNT(*) FROM tmp_right_table_flattened_list);

    WHILE curCounter <= varRange DO
        SET varIterationDataset = 
                (SELECT a.col_source_dataset FROM tmp_right_table_flattened_list WHERE row_id = curCounter);
        SET varIterationTable = 
                (SELECT a.col_source_table_name FROM tmp_right_table_flattened_list WHERE row_id = curCounter);
        SET varIterationTimestampCol = 
                (SELECT a.col_source_timestamp_field_name FROM tmp_right_table_flattened_list WHERE row_id = curCounter);
        SET varIterationTargetTable =
                (SELECT a.col_target_table_name FROM tmp_right_table_flattened_list WHERE row_id = curCounter);


        /*******************************************************************************************/
        /****************************START Generate Target Table Name*******************************/
        /*******************************************************************************************/    
        /*this variable is for what should be the target table name*/

        /*this variable is for searching a metadata view to see if the target table already exists*/
        CREATE OR REPLACE TEMP TABLE tmp_table_checker_value (variable_value   STRING);

        EXECUTE IMMEDIATE 
        ' CREATE OR REPLACE TEMP TABLE tmp_table_checker_value AS '
        || 'SELECT                                                                                      '
        || '    table_id AS variable_value                                                                               '
        || 'FROM                                                                                        '
        ||    argTargetDataset || '.__TABLES__                                                                  '
        || 'WHERE                                                                                       '
        || """    table_id = '""" || varIterationTargetTable || """';   """
        ;
        /*Sets the variable to the row in the temp table*/
        IF (SELECT variable_value FROM tmp_table_checker_value) = varIterationTargetTable
                THEN SET varDMLPrefix = 'INSERT INTO ' || argTargetDataset || '.' || varIterationTargetTable || ' ' ;
                ELSE SET varDMLPrefix = 'CREATE OR REPLACE TABLE ' || argTargetDataset || '.' 
                        || varIterationTargetTable || ' AS ';
        END IF;
        /*******************************************************************************************/
        /******************************END Generate Target Table Name*******************************/
        /*******************************************************************************************/   


        -- select varRange;
        -- select curCounter;

        /* sets the value for the where clause where the records from the source table will be filtered
        by the last run and current run timestamps*/
        SET varWhereClause = 
                ' WHERE (CAST(a.' || varIterationTimestampCol || """ AS TIMESTAMP) > '""" 
                || varLastRunTimestamp || """' AND CAST(a."""
                || varIterationTimestampCol || """ AS TIMESTAMP) <= '""" || varThisRunTimestamp || """')"""
                ;
        SET varQueryText = 
                varDMLPrefix
                || ' SELECT ' || ' a.* FROM ' 
                || varIterationDataset || '.' || varIterationTable || ' AS a '
                || varWhereClause
                || ';';
        /*Executes the above query*/
        EXECUTE IMMEDIATE  
        varQueryText;
        /*flips the counter up by 1*/
        SET curCounter = curCounter + 1;
    END WHILE;


    EXECUTE IMMEDIATE
    'UPDATE ' || varMetaDataset || '.' || varMetaTable
    || ' SET ' || varMetaKey || ' = ' || varMetaKey || ' + 1, '
    || varMetaTimestampCol || """ = '""" || varThisRunTimestamp || """' WHERE 1=1;"""
    ;

END;
