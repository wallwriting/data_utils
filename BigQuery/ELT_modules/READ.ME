NOTE: procs can be copy/pasted. However, the dataset name in the 1st line of the CREATE OR REPLACE PROCEDURE statement needs to be changed from 'test' to your dataset name

This folder contains ELT modules to run in BigQuery. Each module takes data from a specified table, performas its task, and outputs the results into another table. Users only need to specify the input project/dataset/table and output project/dataset/table as well as any join fields. No information about the schema is necessary. Each module is entirely self-contained (no additional libraries are needed, and no outside procs/functions are called), can be run in any combination, and in any order.

Modules:

deSTRUCT
  - Flattens all STRUCT datatypes and creates a separate table for each
  - Creates a root table with the remaining non-STRUCT fields
  - User selects a key field to be able to JOIN all tables together
  Arguments:
      varSrcPrj STRING: The name of the source project--must be put in quotes (eg 'MY-SOURCE-PROJECT')
      varSrcDs STRING: The source dataset--must be put in quotes (eg 'MY-SOURCE-DATASET')
      varSrcTbl STRING: The target dataset--must be put in quotes (eg 'MY-TARGET-DATASET')
      varTgtDs STRING: The target dataset--must be put in quotes (eg 'MY-TARGET-DATASET')
      varTblJoinKey STRING: The join column that will be included in all flattened tables created by the proc--must be put in quotes (eg 'my_join_column')

disARRAY
  - Flattens all ARRAY datatypes and creates a separate table for each
  - Creates a root table with the remaining non-STRUCT fields
  - User selects a key field to be able to JOIN all tables together
  Arguments:
      varSrcPrj STRING: The name of the source project--must be put in quotes (eg 'MY-SOURCE-PROJECT')
      varSrcDs STRING: The source dataset--must be put in quotes (eg 'MY-SOURCE-DATASET')
      varSrcTbl STRING: The target dataset--must be put in quotes (eg 'MY-TARGET-DATASET')
      varTgtDs STRING: The target dataset--must be put in quotes (eg 'MY-TARGET-DATASET')
      varTblJoinKey STRING: The join column that will be included in all flattened tables created by the proc--must be put in quotes (eg 'my_join_column')

NULLdeCOLUMNizer
  - Drops all NULL fields from a table
  - ARRAY and STRUCT fields are always created in the output table as they can’t be checked for NULLs without flattening them
    Arguments:
      varSrcPrj STRING: The name of the source project--must be put in quotes (eg 'MY-SOURCE-PROJECT')
      varSrcDs STRING: The source dataset--must be put in quotes (eg 'MY-SOURCE-DATASET')
      varSrcTbl STRING: The target dataset--must be put in quotes (eg 'MY-TARGET-DATASET')
      varTgtDs STRING: The target dataset--must be put in quotes (eg 'MY-TARGET-DATASET')

JOINer
  - Joins together two or more tables
  - One “base” table is selected--for joining more than two tables, each table is joined back to the base table (ie Table A joins to Table B, Table A joins to Table C, Table A joins to Table D, etc.)
  - Can select INNER, LEFT, RIGHT, FULL OUTER, and CROSS joins
    Arguments:
      varSourceProject STRING: The name of the source project--must be put in quotes (eg 'MY-SOURCE-PROJECT')
      varSourceDataset STRING: The source dataset--must be put in quotes (eg 'MY-SOURCE-DATASET')
      varTargetDataset STRING: The target dataset--must be put in quotes (eg 'MY-TARGET-DATASET') 
      varTargetTable STRING: The target table--must be put in quotes(eg 'MY-TARGET-TABLE')
      varMainTable STRING: The parent table that all other tables will join to--must be put in quotes (eg 'MY_MAIN_TABLE_NAME'
      varJoinKey STRING: The join column of the parent table--must be put in quotes (eg 'my_join_column')
      varJoinType STRING: The type of join--must be put in quotes--only one one type of join is allowed per call (eg 'INNER', 'LEFT', 'RIGHT, 'FULL OUTER', or 'CROSS')
      varRightTableKeyArray ARRAY<STRUCT<right_table_name STRING, right_key_field STRING>>: A key/value pair list of each child table and the join key (eg [(TableB', 'KeyB'), ('TableC', 'KeyC'), ('TableD', 'KeyD')])
      
UPSERTer
  - Takes two tables and performs an UPSERT for all fields whose names match from source to target
  - Can handle more complex scenarios than MERGE, including cases where the same record has multiple updates and handling deletes even in cases where the source table is only a subset of the target table
  - Updates are converted to deletes and inserts to handle cases where many fields are updated
  - Proc will only consider column names that match in the source and target tables 
    Arguments:
      source_project STRING: The name of the source project--must be put in quotes (eg 'MY-SOURCE-PROJECT')
      source_dataset STRING:  The source dataset--must be put in quotes (eg 'MY-SOURCE-DATASET')
      source_table STRING: The source table--must be put in quuotes (eg 'MY_SOURCE_TABLE_NAME')
      source_version STRING: The column used to version a record--this is often a timestamp or sequence number--column name must match between source and target and must be put in quotes (eg 'my_version_column')
      source_dml_indicator STRING: The column used to indicate the type of dml operation to be undertaken--must be put in quotes (eg 'my_dml_indicator_column')
      join_key STRING: The join column of both the source and target table table--must be the same name on both source and target and must be put in quotes (eg 'my_join_column')
      target_dataset STRING: The target dataset--must be put in quotes (eg 'MY-TARGET-DATASET')
      target_table STRING: The target table--must be put in quuotes (eg 'MY_TARGET_TABLE_NAME')
      update_var STRING: The value in the source_dml_indicator column that represents an update--must be put in quotes (eg 'U')
      insert_var STRING: The value in the source_dml_indicator column that represents an insert--must be put in quotes (eg 'I')

COLUMNpicker
  - Create a new table using a specified subset of columns from a source table
  - New column names in the target table must also be specified
  Arguments:
    varSourceProject STRING
    varSourceDataset STRING
    varSourceTable STRING
    varTargetDataset STRING
    varTargetTable STRING
    varSelectColumnArray ARRAY<STRUCT<source_column_name STRING, target_column_name STRING>>): Must be sent as a key/value pair with the source column name and a target column name (eg [('source_col1', 'target_col1'), ('source_col2', 'target_col2'), ('source_col3', 'target_col3')]

KEYmaster
  - Creates a target table along with a new key field based on a specified list of fields
  - User passes a set of fields--the values will be converted to string and concatenated together, then a farm fingerprint hash will be applied
  - The same concatenated string value will always produce the same hash--this means it can be used prior to running a JOINer in cases where tables have multi-column join keys
  Arguments:
      varSourceProject STRING
      varSourceDataset STRING
      varSourceTable STRING
      varTargetDataset STRING
      varTargetTable STRING
      varTargetKey STRING
      varHashColumnArray ARRAY<STRING>: The list of columns you want to use for the hash key (eg ['col1', 'col2', 'col3']) 

FLATTENator
  - Unnests ARRAY and STRUCT datatypes
  - This does the work of both the deSTRUCT and disARRAY procs in one pass. In the future, this proc will receive all updates.
  Arguments:
      varSrcPrj STRING: The name of the source project--must be put in quotes (eg 'MY-SOURCE-PROJECT')
      varSrcDs STRING: The source dataset--must be put in quotes (eg 'MY-SOURCE-DATASET')
      varSrcTbl STRING: The target dataset--must be put in quotes (eg 'MY-TARGET-DATASET')
      varTgtDs STRING: The target dataset--must be put in quotes (eg 'MY-TARGET-DATASET')
      varTblJoinKey STRING: The join column that will be included in all flattened tables created by the proc--must be put in quotes (eg 'my_join_column')

BatchCDC
  - Takes records from multiple source tables that have been inserted after the last batch run of an ELT process
  - This is used as the first step of an ELT pipeline to select only change data records. It requires a metadata table that stores the timestamp for the most recent batch run
  Arguments:
    varRightTableKeyArray ARRAY<STRUCT<right_table_project STRING, right_table_dataset STRING, 
        right_table_name STRING, right_timestamp_field STRING, target_table_name STRING>>: An array of struct--each struct has information about 1 source and 1 target table, can pass multiple values in the array to do this for multiple tables
    
    varMetaTableStruct STRUCT<meta_project STRING, meta_dataset STRING, meta_table_name STRING, meta_key STRING, meta_timestamp STRING>: The metadata table with the batch run information--the table must have a key field that is an integer and a timestamp field

    varTargetDataset STRING: The dataset of the target table--this means this can only be done for a single target dataset, this can be modified if each target table needs its own dataset


NullDELETEr
  - Deletes any records that have NULL values in any of the columns passed in the parameter
  - This is one of the last steps of an ELT pipeline. In situations were a single target record is created from multiple source tables and/or systems, this removes any records from a table where there are NULL values in the columns stated. Such records are assumed to have incomplete source data and is therefore not valid. As data from each source lands, the record will continue to get processed in the pipeline and removed by this procecure. Once all of the source tables have landed data, then the record is considered valid and wouldn't be deleted by this process
  Arguments:
    varDataset STRING: The dataset where the table resides
    varTable STRING: The name of the table
    varNullColumnArray ARRAY<STRING>: An array of all of the columns that are to be checked for NULL values
