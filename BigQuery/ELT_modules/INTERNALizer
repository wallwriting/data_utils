CREATE OR REPLACE PROCEDURE test.sp_internalizer(
  argSourceProject STRING,  --the project that the data will be loaded into
  -- argSourceRegion STRING, 
  -- argConnection STRING, 
  argFormat STRING, --the data file format (usually avro, json, etc) in lower case
  argSourceUriBase ARRAY<STRING>, -- the bucket url down to the table-level. Must add the trailing slash and wildcard.
  argTargetDataset STRING,  -- the dataset that the data will be loaded into
  argTargetExternalTable STRING, --the name of the external version of the table
  argTargetInternalTable STRING, --the name of the internal version of the table
  argPrimaryKeyArray ARRAY<STRING>) --the column name of the primary key field (in array format for multiple columns)

BEGIN

/*Matches the parameters in the procedure. Use this to test the script*/
  -- DECLARE argSourceProject STRING;
  -- DECLARE argSourceRegion STRING;
  -- DECLARE argConnection STRING;
  -- DECLARE argFormat STRING;
  -- DECLARE argSourceUriBase ARRAY<STRING>;
  -- DECLARE argTargetDataset STRING;
  -- DECLARE argTargetExternalTable STRING;
  -- DECLARE argTargetInternalTable STRING;
  -- DECLARE argPrimaryKeyArray ARRAY<STRING>;

  DECLARE varSourceUriModified STRING;
  DECLARE varUriLength INT64;
  DECLARE varRange INT64;
  DECLARE varCounter INT64;
  DECLARE varCurrentColumn STRING;
  DECLARE varJoinSyntax STRING;
  DECLARE varStringLength INT64;
  DECLARE varKeyColumnList STRING;

  /**************************************************************************/
  /******************THIS SECTION WILL CREATE THE JOIN SYNTAX FOR************/ 
  /******************THE MERGE STATEMENT THAT WILL BE USED LATER*************/
  /**************************************************************************/

  /*creates a temp table that unnests the array of primary key columns
  and assigns a row number to each record*/
  CREATE OR REPLACE TEMP TABLE tmp_column_list AS
  SELECT row_number() OVER () as row_id, column_name
  FROM UNNEST(argPrimaryKeyArray) column_name
  ;

  /*keeps appending the string with columns that will be joined together*/
  SET varRange = (select count(1) FROM tmp_column_list);
  SET varCounter = 1;
  SET varJoinSyntax = '';
  SET varKeyColumnList = '';

  WHILE varCounter <= varRange DO
    SET varCurrentColumn = (SELECT column_name FROM tmp_column_list WHERE row_id = varCounter);
    SET varJoinSyntax = varJoinSyntax || """ s.payload.""" || varCurrentColumn || """ = mx.""" || varCurrentColumn || """ AND""";
    SET varKeyColumnList = varKeyColumnList || """ payload.""" || varCurrentColumn || """, """;
    SET varCounter = varCounter + 1;
  END WHILE;

  /*trims off the last AND*/
  SET varStringLength = (SELECT LENGTH(varJoinSyntax));
  SET varJoinSyntax = (SELECT LEFT(varJoinSyntax, varStringLength - 3));

  /*trims off the last comma*/
  SET varStringLength = (SELECT LENGTH(varKeyColumnList));
  SET varKeyColumnList = (SELECT LEFT(varKeyColumnList, varStringLength - 2));


  /**************************************************************************/
  /*************************END JOIN SYNTAX SECTION**************************/
  /**************************************************************************/


  /*converts the array of uris into string in order to use it in the execute immediate statement later*/
  SET varSourceUriModified = (select concat(""" ['""" || array_to_string(argSourceUriBase, """', '""") || """'] """));

  /*creates the external table*/
  EXECUTE IMMEDIATE
  """ CREATE OR REPLACE EXTERNAL TABLE """ || """`""" || argSourceProject || """`.""" || argTargetDataset || """.""" || argTargetExternalTable
  -- || """  WITH CONNECTION `""" || argSourceProject || """`.`""" || argSourceRegion || """`.`""" || argConnection || """`"""
  || """  OPTIONS ("""
  || """    format = """ || argFormat || ""","""
  || """    uris = """ || varSourceUriModified
  || """    ); """
  ;

  /*checks if the target table already exists*/
  EXECUTE IMMEDIATE
  """CREATE OR REPLACE TEMP TABLE tmp_tablechecker AS """
  || """SELECT COUNT(1) AS cnt FROM """ || """`""" || argSourceProject || """`.""" || argTargetDataset || """.__TABLES_SUMMARY__ WHERE table_id = '""" || argTargetInternalTable || """'; """
  ;

  /*creates a new table if it doesn't exist*/
  IF (SELECT cnt FROM tmp_tablechecker) = 0 THEN 
    BEGIN
      /*first tries to convert a milliseconds integer into a timestamp*/
      EXECUTE IMMEDIATE
      """ CREATE OR REPLACE TABLE """ 
      || """`""" || argSourceProject || """`.""" ||  argTargetDataset || """.""" || argTargetInternalTable || """ AS """
      || """ SELECT payload.*, source_metadata.*, TIMESTAMP_MILLIS(source_timestamp) AS source_timestamp FROM """ 
      || """`""" || argSourceProject || """`.""" || argTargetDataset || """.""" || argTargetExternalTable || """;"""
      ;

      /*If this errors, it assumes it's due to the source_timestamp not being in millis and tries to do a straight insert*/
      EXCEPTION WHEN ERROR THEN
      EXECUTE IMMEDIATE
      """ CREATE OR REPLACE TABLE """ 
      || """`""" || argSourceProject || """`.""" || argTargetDataset || """.""" || argTargetInternalTable || """ AS """
      || """ SELECT payload.*, source_metadata.*, source_timestamp FROM """ 
      || """`""" || argSourceProject || """`.""" || argTargetDataset || """.""" || argTargetExternalTable || """;"""
      ;
    END;
    /*if the table doesn't exist, performs an upsert.
    The merge function is difficult to use here 
    because of some syntax limiations with the struct datatype*/
    ELSE 
      BEGIN TRANSACTION;
      EXECUTE IMMEDIATE
      """DELETE FROM """ || """`""" || argSourceProject || """`.""" || argTargetDataset || """.""" || argTargetInternalTable || """ mx """
      || """WHERE EXISTS (SELECT 1 FROM """ 
      || """`""" || argSourceProject || """`.""" || argTargetDataset || """.""" || argTargetExternalTable || """ s WHERE """ || varJoinSyntax || """); """
      ;
        BEGIN
          /*first tries to convert a milliseconds integer into a timestamp*/
          EXECUTE IMMEDIATE
          """ INSERT INTO """ || """`""" || argSourceProject || """`.""" || argTargetDataset || """.""" || argTargetInternalTable 
          || """      SELECT s.payload.*, s.source_metadata.*, TIMESTAMP_MILLIS(s.source_timestamp) AS source_timestamp """
          || """      FROM """ || """`""" || argSourceProject || """`.""" || argTargetDataset || """.""" || argTargetExternalTable || """ s """
          || """      JOIN """
          || """        ( """
          || """          SELECT """
          ||            varKeyColumnList
          || """            , MAX(source_timestamp) as source_timestamp """
          || """          FROM """
          ||            """`""" || argSourceProject || """`.""" || argTargetDataset || """.""" || argTargetExternalTable
          || """          GROUP BY """
          ||            varKeyColumnList
          || """        ) mx """
          || """          ON """ || varJoinSyntax || """ AND s.source_timestamp = mx.source_timestamp; """ 
          ;
          /*If this errors, it assumes it's due to the source_timestamp not being in millis and tries to do a straight insert*/
          EXCEPTION WHEN ERROR THEN
            EXECUTE IMMEDIATE
            """ INSERT INTO """ || """`""" || argSourceProject || """`.""" || argTargetDataset || """.""" || argTargetInternalTable 
            || """      SELECT s.payload.*, s.source_metadata.*, s.source_timestamp """
            || """      FROM """ || """`""" || argSourceProject || """`.""" || argTargetDataset || """.""" || argTargetExternalTable || """ s """
            || """      JOIN """
            || """        ( """
            || """          SELECT """
            ||            varKeyColumnList
            || """            , MAX(source_timestamp) as source_timestamp """
            || """          FROM """
            ||            """`""" || argSourceProject || """`.""" || argTargetDataset || """.""" || argTargetExternalTable
            || """          GROUP BY """
            ||            varKeyColumnList
            || """        ) mx """
            || """          ON """ || varJoinSyntax || """ AND s.source_timestamp = mx.source_timestamp; """ 
            ;
        END;
      COMMIT TRANSACTION;
  END IF;
    /*drops the external table that was created in order to keep the dataset tidy. Remove this if you need to keep the external table for analysis*/
    EXECUTE IMMEDIATE
    """DROP TABLE IF EXISTS """ || """`""" || argSourceProject || """`.""" || argTargetDataset || """.""" || argTargetExternalTable || """;"""
    ;

END;
